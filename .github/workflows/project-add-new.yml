name: Categorize new items
on:
  issues:
    types:
      - labeled
      - unlabeled
      - opened
  pull_request:
    types:
      - opened
jobs:
  # add-to-project:
  #   name: Add item to project
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   steps:
  #     - uses: actions/add-to-project@v0.4.0
  #       with:
  #         project-url: https://github.com/orgs/helix-editor/projects/5
  #         github-token: ${{ secrets.TOKEN }}
  new-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          ORGANIZATION: helix-editor
          PROJECT_NUMBER: '5'
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:50) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION \
                -F number=$PROJECT_NUMBER \
                > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV

          # Transform each status field name into camel case and track its id
          cat project_data.json | jq -r '.data.organization.projectV2.fields.nodes[]
            | select(.name == "Status")
            | .options[]
            | {id: .id, name: .name | gsub("[^\\w\\s]\\s"; "")
            | ascii_upcase
            | gsub("[\\s-]"; "_")}
            | "STATUS_ID_" + .name + "=" + .id' \
            >> $GITHUB_ENV

      - name: Add item to project
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          CONTENT_ID: ${{ github.event.issue.node_id || github.event.pull_request.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $content:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $content}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f content=$CONTENT_ID --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Get date
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: New PR
        if: github.event.pull_request
        run: echo "TARGET_OPTION_ID=${STATUS_ID_NEEDS_INITIAL_REVIEW}" >> $GITHUB_ENV

      - name: Bugs
        if: "github.event.issue && github.event.label.name == 'C-bug'"
        run: echo "TARGET_OPTION_ID=${STATUS_ID_BUG}" >> $GITHUB_ENV

      - name: New
        if: "github.event.issue && github.event.label.name != 'C-bug'"
        run: echo "TARGET_OPTION_ID=${STATUS_ID_NEW}" >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                }
              }
            }' \
            -f project=$PROJECT_ID \
            -f item=$ITEM_ID \
            -f status_field=$STATUS_FIELD_ID \
            -f status_value=${{ env.TARGET_OPTION_ID }} \
            --silent
